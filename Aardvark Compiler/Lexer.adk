include TokenTypes, Operators, Keywords, Quotes, Whitespaces, Booleans, Delimiters, NotIncluded from Data
#include Error


class Token as this {
    $constructor(type, 
            start, 
            end,
            value = null,
            variation = null) 
    {
    this.type = type
    this.length = end.index - start.index + 1
    this.start = start
    this.end = end
    this.value = value
    this.variation = variation
    this.position = {
        start: start,
        end: end
    }
  }
  $string() {
    return $"Token({this.type}, \"{this.value}\", from {this.start.line}:{this.start.column} to {this.end.line}:{this.end.column})"
  }
}


class Lexer as this {
  $constructor(useIndents = false, tokenizeComments = false) {
    this.useIndents = useIndents
    this.tokenizeComments = tokenizeComments
    this.data = ""
    this.index = 0
    this.line = 0
    this.column = 0
    #TODO: merge index, line, and column into a position attribute
    this.output = []
    this.empty = true
    this.AtEnd = false
    this.curChar = ""
  }
  function isWhitespace(char)
    return (char ? this.curChar) in Whitespaces

  function isNewline(char)
    return (char ? this.curChar) in '\n;'

  function isQuote(char)
    return (char ? this.curChar) in Quotes

  function isDelimiter(char)
    return (char ? this.curChar) in Delimiters 

  function isNumber(char)
    return (char ? this.curChar) in '0123456789'

  function addToken(type, start, end, value, variation)
    return this.output.add(Token(type, start, end, value, variation))

  function otherwise(char) {
    char = char ? this.curChar
    return !(this.isWhitespace(char) | this.isDelimiter(char) | this.isNewline(char) | char == '#' | char in Operators)
  }
  function detect(text) {
    if this.curChar == text[0] {
        for i in sequence(1, 1, text.length - 1) {
            if this.peek(i) != text[i] | i > this.data.length return false;
        }
    } else return false;
    return true
  }
  function newline() {
    this.empty = true
    this.line = this.line + 1
    this.column = 0
  }
  function advance(amt = 1) {
    this.index = this.index + amt
    this.column = this.column + amt
    if this.index < this.data.length
      this.curChar = this.data[this.index]
    else 
      this.AtEnd = true
  }
  function peek(amt = 1) {
    if this.index + amt < this.data.length 
      return this.data[this.index + amt]
    else return null;
  }
  function pos() {
    return {index: this.index, line: this.line, column: this.column}
  }
  function tokenize(data='') {
    #*
      Takes code and converts it to tokens.
    *#
    if !data throw Error("Value", "String cannot be empty")
    this.data = data
    this.index = 0
    this.line = 0
    this.column = 0
    this.output = []
    this.empty = true
    this.AtEnd = false
    this.curChar = this.data[this.index]
    while this.index < this.data.length {
        
        # Operators
        for op in Operators {
            for i in op {
                if i in NotIncluded & this.detect(op) {
                    start = this.pos()
                    this.advance(op.length - 1)
                    this.addToken("Operator", start, this.pos(), op)
                    this.advance()
                    break
                }
            }
        }

        # Newlines (\n or ;)
      if this.isNewline() {
        this.addToken('LineBreak', this.pos(), this.pos(), this.curChar, this.curChar)
        if this.curChar = '\n' this.newline(); # Only increment the line if its a \n
        else this.empty = true
      }

      # Indents
      else if this.isWhitespace() & this.empty & this.useIndents {
        value = ''
        start = this.index
        startcolumn = this.column
        while this.isWhitespace() & !this.AtEnd {
          value = value + this.curChar
          this.advance()
        }
        if !this.isNewline() {
          this.advance(-1)
          this.addToken('Indent', start, this.pos(), value)
        }
        else this.advance(-1);
      }

      #Delimiters
      else if this.isDelimiter() 
        this.addToken('Delimiter', this.pos(), this.pos(), this.curChar)

      #Numbers
      else if this.isNumber() {
        start = this.pos()
        value = ''
        seen_dot = false
        while (this.isNumber() | this.curChar == '.') & !this.AtEnd {
          if seen_dot & this.curChar == '.'
            throw Error('Syntax', 'Already saw the dot!')
          if this.curChar == '.' seen_dot = true
          value = value + this.curChar
          this.advance()
        }
        this.advance(-1)
        this.addToken('Number', start, this.pos(), value)
      }

      # Multiline comments
      else if this.detect('#*') {
        value = ''
        start = this.pos()
        while !this.detect('*#') & !this.AtEnd {
            value = value + this.curChar
            if this.curChar == '\n' this.newline()
            this.advance()
        }
        this.advance('*#'.length - 1) # To skip the *#
        if (this.tokenizeComments) this.addToken('Comment', start, this.pos(), value)
      }

      # Single line comments
      else if this.curChar == '#' {
        value = ''
        start = this.pos()
        while this.curChar != '\n' & !this.AtEnd {
          value = value + this.curChar
          this.advance()
        }
        this.advance(-1) # To still register the newline
        if (this.tokenizeComments) this.addToken('Comment', start, this.pos(), value)
      }

      # Strings
      else if this.isQuote() {
        variation = this.curChar
        value = ''
        start = this.pos()
        backslash = false
        while !this.AtEnd {
          this.advance()
          if this.AtEnd throw "Error: Unexpected EOF";
          if backslash {
            if this.curChar == '\\' value = value + '\\'
            else if this.curChar == 'n' value = value + '\n'
            else value = value + this.curChar
            backslash = false
          }
          else {
            if (this.curChar == '\\') backslash = true
            else if this.curChar == variation break
            else value = value + this.curChar
          }
        }
        this.addToken('String', start, this.pos(), value, variation)
      }

      # Identifiers, Keywords, and Operators
      else if this.otherwise() {
        value = ''
        start = this.pos()
        while (this.otherwise() or this.isNumber()) & !this.AtEnd {
          value = value + this.curChar
          this.advance()
          #stdout.write(this.AtEnd, '\n')
        }
        this.advance(-1)
        type = 'Identifier'
        (type = 'Operator') if value in Operators else
        (type = 'Keyword') if value in Keywords else
        (type = 'Boolean') if value in Booleans
        this.addToken(type, start, this.pos(), value)
      }

      # Advance
      (break) if this.AtEnd
      this.advance()
    }
    return this.output
  }
}