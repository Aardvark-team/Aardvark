include "../Lexer"
from ansi include fg, bg, ef, rs

let styles = {
    "String": rs.all + fg(152, 195, 121),
    "Function": rs.all + fg(97, 175, 239),
    "Number": rs.all + fg(229, 192, 123),
    "Keyword": rs.all + fg(224, 108, 117),
    "Operator": rs.all + fg(86, 182, 194) + ef.bold,
    "Boolean": rs.all + fg(229, 192, 123),
    "background": rs.all + bg(36, 39, 55),
    "Comment": rs.all + fg(92, 99, 112) + ef.italic,
    "Delimiter": rs.all + fg(245, 245, 255),
    "default": rs.all + fg(171, 178, 191),
    "suggestion": rs.all + fg(255, 165, 0)
}

function genLine(linenum, digits)
    " " * (Number(digits) - linenum.digits.length) + $"{styles.default}{linenum} â”‚ "


function Highlight(code, tokens, opts={}) {
    # let lexer = Lexer.Lexer(false, true, null)
    # let tokens = lexer.tokenize(code)
    let line = opts.startline?1
    let output = (styles.background if opts.background? else "") + styles.default
    if opts.linenums?true
        output += genLine(line, opts.leftpadding?4)
    let toknum = 0
    let last = 0
    for token in tokens {
        if token.start.index > last + 1
            output += styles.default + code.slice(last+1, token.start.index)

        if token.type == "String"
            output += styles[token.type] + code.slice(token.start.index, token.end.index + 1)

        else if token.value == "\n" {
            line++
            if opts.linenums?true
                output += fg.rs + "\n" + genLine(line, opts.leftpadding?4)
            else
                output += fg.rs + "\n"
        }
        else if token.type == "Identifier" & toknum < tokens.length - 1 & tokens[toknum + 1].type == "Delimiter" & tokens[toknum + 1].value == "("
            output += styles.Function + code.slice(token.start.index, token.end.index + 1)

        else if token.type in styles
            output += styles[token.type] + code.slice(token.start.index, token.end.index + 1)

        else
            output += styles.default + code.slice(token.start.index, token.end.index + 1)

        toknum += 1
        last = token.end.index
    }

    output += rs.all
    return output
}

if is_main {
    stdout.write(Highlight("function x(y, Number z) {
    let x = 'Hello World'if true
}", {linenums: false}), "\n")
}