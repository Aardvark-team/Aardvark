from ansi include fg, bg, ef, rs
include Highlight, styles from SyntaxHighlighter
include format from ErrorFormatter
include printError from OldErrors

class ErrorHandler as this {
    $constructor(code, filename, silenced = false) {
        this.code = code
        this.codelines = code.split("\n")
        this.filename = filename
        this.silenced = silenced
    }


    function Throw(type, message, options = {}, note="", kill=true) {
        # uppercase throw to not conflict with throw keyword
        if this.silenced return
        options.filename = this.filename
        options.lineno = options.lineno?options.line_number?
        options.linestart = options.linestart?(options.lineno?1 - (1 if options.lineno?1 > 1 else 0))
        options.lineend = options.lineend?(options.lineno?1 + 2)
        printError(
            type, # Removed mode so that we can use the same Error handler for warnings, suggestions, and errors.
            options,
            message,
            options.did_you_mean?false,
            options.traceback?false,
            this.code,
            options.color?fg(255, 30, 10),
            options.symbol?'ⓧ',
            note
        )
        exit(1) if kill
    }
    function ThrowNew(options, kill) {
        # TODO: finalize arguments here before changing everything.
        let error = format(Highlight(this.code, {
            linenums: false
        }).split("\n"), options.message?"This isn't valid.", options.error_type?"SyntaxError", options.filename?"<main>", options.location, options.markers?[], options.color?fg(255, 30, 10), options.symbol?'ⓧ')
        stdout.flush()
        stderr.flush()
        stderr.write(error)
        stderr.flush()
        exit(1) if kill
    }
    function getLine(linenum) {
        return this.codelines[linenum-1]
    }
    function replace(linenum, start, end, new) {
        line = this.getLine(linenum)
        return line.slice(0, start) + new + line.slice(end+1, 0)
    }
}
function ErrorType(t='error') match t {
    case 'error' return {
        color: fg(255, 30, 10),
        symbol: "ⓧ"
    }
    case 'warning' return {
        color: fg(235, 175, 10),
        symbol: '⚠'
    } 
    case 'suggestion' return {
        color: fg(10, 50, 255),
        symbol: '❖'
    }
}

if is_main {
    stdout.write('Running...\n')
    printError(
        "SyntaxError",
        {
            linestart: 1,  # Line of the code's start
            lineend: 3,  # Line of the code's end
            lineno: 2,  # Line the error is on
            filename: "main.adk",  # File the error is in.
            marker: {start: 9, length: 6},
            underline: {start: 1, end: 30}
        },
        '".write" is invalid. No object to get attribute of.',
        'stdout.write("Hello World\\n")',
        [
            {"name": "this()", "line": 2, "col": 4, "filename": "main.adk"},
            {"name": "is_an()", "line": 5, "col": 3, "filename": "other.adk"},
            {"name": "example()", "line": 8, "col": 8, "filename": "test.adk"},
        ],
        '# print Hello World\nstdout|.write("Hello World\\n")\n#after',
        note="Was this a typo?",
        ...ErrorType('error')
    )
}