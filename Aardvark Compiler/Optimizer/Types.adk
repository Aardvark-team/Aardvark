static class FunctionSignature {
    let parameters = []
    let return_type
    let Object parameter_expansion
    let Object body
}
static class FunctionValue as this {
    let type = this
    let type_name = "Function"
    let [...FunctionSignature] signatures

}
static class ObjectValue as this {
    #*
    Used for scopes and objects, anything with named values.
    *#
    let Object value
    let Scope parent
    let type = this
    let type_name = "Object"
    $constructor(initial={}, parent?) {
        this.parent = parent
        this.value = initial
    }
    function declare(name, initial=null) {
        this.value.(name) = null
    }
    function Set(name, value) {
        if not (name in this.value) {
            
        }
    }
    function Get(name) {
        return this.value.(name)
    }
    $string {
        let string = "{"
        for name:value in this.value {
            string += name + ": " + value + ", "
        }
        string += "}"
        return string
    }
}

class NumberValue as this {
    let value
    let type = this
    let type_name = "Number"
    $constructor(value) {
        this.value = value
    }
}

static class ValuePossibility as this {
    let conditions = []
    let value
    let position
    let value_possibilities = [this]
    $constructor(value, position, conditions=[]) {
        this.value = value
        this.position = position
        this.conditions = conditions
    }
}
static class Identifier as this {
    let value_possibilities = []
    get type_possibilities {
        return this.value_possibilities.map(function(x) type_of(x.value))
    }
    $constructor((ValuePossibility or Array) value_possibilities) {
        if type_of(value_possibilities) is Array
            this.value_possibilities = value_possibilities
        else
            this.value_possibilities = [value_possibilities]
    }
}
static class Variable as this {

}
static class Expression as this {

}
static class TypeUnion as this {
    let types = []
    $constructor(...types) {
        this.types = types
    }
    $string() {
        return " | ".join(this.types.map(function(x) x.type_name))
    }
}

static class BitsType as this {
    let type_name = "Bits"
}
static class TypeType as this {
    let type_name = "Type"
}
static class ArrayType as this {
    let type_name = "Array"
}
function get_type_of(value) {
    if [FunctionValue, ObjectValue, NumberValue, BitsType, TypeType].contains(value)
        return TypeType
    else
        return type_of(value)
}
function get_type_name(x) {
    if type_of(x) is TypeUnion
        return $'Union({" | ".join(x.types.map(get_type_name))})'
    else
        return x.type_name
}