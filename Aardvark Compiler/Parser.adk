from Data include OrderOfOps
include Data
include Lexer


# Do the hardest things first!


class Parser as this {
    $constructor(err_handler, lexer) {
        this.code = lexer.data
        this.codelines = this.code.split("\n")
        this.tokens = lexer.output
        this.pos = 0
        this.err_handler = err_handler
        this.lexer = lexer
    }
    ## Utility

    # Get next tokens
    function peek(n=0)
        return (this.tokens[this.pos + n]) if this.pos + n < this.tokens.length else (null);

    # Compare the next token with type, value
    function compare(Type, value, n=0) {
        if this.isEOF() return false

        tok = this.peek(n)
        if tok & tok.type == Type & (value == null | value == tok.value) return true
        return false
    }

    # Advance to the next token.
    function advance() this.pos += 1

    # Eat all consecutive linebreaks
    function eatLBs() while this.compare('LineBreak') this.advance()
    
    # Is at the end of the file
    function isEOF() return this.pos >= this.tokens.length;

    # Unexpected End Of File Error
    function EOFError(Type, value) {
        throw Error("EOF", "unexpected EOF")
        #TODO
    }

    # Consume the current token if the type and value match, else throw an error
    function eat(Type="any", value) {
        if Type == 'any' or this.compare(Type, value) {
            curr = this.peek()
            this.advance()
            return curr
        }
        if this.isEOF() return this.eofError(Type, value);
        throw Error("Token", $"Token {Type} expected, but not found.")
        #TODO: Throw an error
    }

    ## Actually parse it
    function pPrimary(require=false) {
        tok = this.peek()
        ast_node = null

        if !tok | this.isEOF() 
            return this.EOFError('Value') if require else null;

        else if this.compare('Operator', '$') & this.peek(1) & this.peek(1).type == 'String' & this.peek().end.column == this.peek(1).start.column - 1 {
            start = this.eat()
            string = this.eat()
            # TODO!
            replacements = []
            ast_node = {
                type: "TemplateString",
                postion: {start:start.start, end:string.end},
                value: string.value,
                replacements: replacements
            }
            # TODO, template strings
        }

        else if tok.type in ['String', 'Number', 'Boolean'] {
            this.eat()
            value = tok.value
            if tok.type == "Number"
                value = Number(value);
            if tok.type == 'Boolean'
                value = value == true;
            ast_node = {
                type: tok.type + 'Literal',
                value: value,
                position: tok.position,
                tokens: {value: tok}
            }
        }

        else if this.compare('Delimiter', '{')
            ast_node = this.pObject()

        else if this.compare('Delimiter', '[')
            ast_node = this.pArray()

        else if tok.type == "Identifier" {
            this.eat()
            if tok.value == "set" and this.compare("Delimiter", "{")
                ast_node = this.pSet();
            else 
                ast_node = {
                    type: 'VariableAccess',
                    value: tok.value,
                    position: tok.position
                }
        }

        else if this.compare('Delimiter', '(') {
            this.eat()
            ast_node = this.pStatement()
            this.eat('Delimiter', ')')
        }

        #TODO
        while ast_node {
            if this.compare("Identifier") & this.peek().start.column == ast_node.position.end.column + 1 {
                var = this.eat()
                ast_node = {
                    type: "Multiply",
                    value: ast_node,
                    variable: var.value,
                    position: {
                        start: ast_node.position.start,
                        end: var.end
                    },
                    tokens: {
                        "value": ast_node.tokens,
                        "variable": var
                    }
                }
            }
            if this.compare("Delimiter", '(') & this.peek().start.column == ast_node.position.end.column + 1 {
                ast_node = this.pFunctionCall(ast_node)
                continue
            }
            if this.compare('Delimiter', '.') {
                this.eat()
                property_name = this.eat('Identifier')
                ast_node = {
                    type: "PropertyAccess",
                    property: property_name.value,
                    value: ast_node,
                    position: {
                        start: ast_node.position.start,
                        end: property_name.end
                    },
                    tokens: {
                        property: property_name,
                        value: ast_node.tokens
                    }
                }
                continue;
            }
            if this.compare('Delimiter', '[') {
                this.eat()
                property = this.pExpression()
                this.eat('Delimiter', ']')
                ast_node = {
                    type: 'Index',
                    property: property,
                    value: ast_node,
                    position: {
                        start: ast_node.position.start,
                        end: property.position.end if property else ast_node.position.end
                    },
                    tokens: {
                        property: property.tokens,
                        value: ast_node.tokens
                    }
                }
                continue;
            }

            return ast_node
            #TODO
        }
        if require {
            throw Error("Empty", "Nothing was found.")
            # Throw an error because nothing was found
            #TODO
        }
    }
    function pExpression(level=keys(OrderOfOps).length-1, require=false, exclude=[]) {
        left = this.pPrimary(false) if level < 0 else this.pExpression(level - 1, false, exclude)
        right = null
        # if the next token is an operator, and the next token != '$' and level in OrderOfOps, and the value of the next token is in the current precedence level and the value of the next token is not in the exclude list.

        if this.compare('Operator') & this.peek().value != '$' & level in OrderOfOps & this.peek().value in OrderOfOps[level] & !(this.peek().value in exclude) {
            op = this.eat()
            right = this.pExpression(level, false)
            if !left and !right {
                throw Error("Operator", "Its just an operator all by itself")
                # Throw an error because its just an operator all by itself
                #TODO
            }
            return {
                type: 'Operator',
                left: left,
                right: right,
                operator: op.value,
                position: {
                    start: left.position.start if left else op.start,
                    end: right.position.end if right else op.end
                }
            }
        }
        if !left 
            left = (this.pPrimary(require)) if level < 0 else (this.pExpression(level - 1, require, exclude));
        return left
    }
    function pBlock(parser=this.pStatement) {
        this.eatLBs()
        start = this.eat('Delimiter', '{')
        body = []
        while this.peek() & !this.compare('Delimiter', '}') {
            if body.length > 0 & this.peek(-1).type != 'LineBreak' 
                this.eat('LineBreak');
            this.eatLBs()
            if this.compare('Delimiter', '}') break;
            body.append(parser())
        }
        end = this.eat('Delimiter', '}')
        return [body, end.end]
    }
    function pObject() {
        start = this.eat('Delimiter', '{')
        obj = []

        while this.peek() & !this.compare('Delimiter', '}') & !(this.compare('Delimiter', ',') & this.peek(1).value == '}') {
            this.eatLBs()
            if obj.length > 0 this.eat('Delimter', ',')
            this.eatLBs()
        
            key = null
            if this.compare('Operator', '...') {
                this.eat()
                obj.add({
                    type: 'Spread',
                    value: this.pStatement()
                })
                continue
            }
            else if this.compare('Identifier') {
                tok = this.eat()
                key = tok.value
                if !this.compare('Delimiter', ':') {
                    obj.add({
                        type: 'Pair',
                        key: key,
                        value: {
                            type: 'VariableAccess',
                            value: tok.value,
                            position: tok.position
                        }
                    })
                    continue
                }
            }
            else if this.compare('Number')
                key = Number(this.eat().value)
            else if this.compare('String')
                key = this.eat().value

            this.eatLBs()
            this.eat('Delimiter', ':')
            this.eatLBs()
            obj.add({
                type: 'Pair',
                key: key,
                value: this.pStatement(true)
            })
            this.eatLBs()
        }
        if this.compare('Delimiter', ',') this.eat();
        end = this.eat('Delimiter', '}')
        return {
            type: 'Object',
            object: obj,
            position: {start: start.start, end: end.end}
        }
    }
    function pArray() {
        start = this.eat('Delimiter', '[')
        array = []

        while this.peek() & !this.compare('Delimiter', ']') & !(this.compare('Delimiter', ',') & this.peek(1).value == ']') {
            this.eatLBs()
            if array.length > 0 this.eat('Delimter', ',')
            this.eatLBs()
        
            key = null
            if this.compare('Operator', '...') {
                this.eat()
                array.add({
                    type: 'Spread',
                    value: this.pStatement()
                })
                continue
            }
            array.add({
                type: 'Value',
                value: this.pStatement(true)
            })
            this.eatLBs()
        }
        if this.compare('Delimiter', ',') this.eat();
        end = this.eat('Delimiter', ']')
        return {
            type: 'Array',
            array: array,
            position: {start: start.start, end: end.end}
        }
    }
    function pSet() {
        start = this.eat('Delimiter', '{')
        set = []

        while this.peek() & !this.compare('Delimiter', '}') & !(this.compare('Delimiter', ',') & this.peek(1).value == '}') {
            this.eatLBs()
            if set.length > 0 this.eat('Delimter', ',')
            this.eatLBs()
        
            if this.compare('Operator', '...') {
                this.eat()
                set.add({
                    type: 'Spread',
                    value: this.pStatement()
                })
                continue
            }
            set.add({
                type: 'Value',
                value: this.pStatement(true)
            })
            this.eatLBs()
        }
        if this.compare('Delimiter', ',') this.eat();
        end = this.eat('Delimiter', '}')
        return {
            type: 'Set',
            set: set,
            position: {start: start.start, end: end.end}
        }
    }
    function pFunctionCall(ast_node) {
        self.eat('Delimiter', '(')
        arguments = []
        keywordArguments = {}
        spreads = []

        while this.peek() & !this.compare('Delimiter', ')') & !(this.compare('Delimiter', ',') & this.peek(1).value == ')') {
            this.eatLBs()
            if set.length > 0 this.eat('Delimter', ',')
            this.eatLBs()
            value = this.pExpression(require=true)

            if value.type == 'Operator' & value.operator == '=' {
                if value.left & value.right & value.left.type == "VariableAcces"
                    keywordArguments[value.left.value] = value.right
                else if !value.left | !value.right
                    throw Error('Argument', 'Keyword Arguments must be in the form "key=value".')
                else 
                    throw Error("Argument", "Keyword Arguments must be valid identifiers.")
            } else if value.type == 'Operator' & value.operator == '...' {
                if value.left & !value.right
                    throw Error("Operator", "🤦‍♂️ You know the ... goes on the left side of the expression, right?")
                else if value.left & value.right
                    throw Error('Operator', '... only needs the right operand.')
                else spreads.add(value.right)
            }
            else {
                arguments.add(value)
            }
        }
        if this.compare('Delimiter', ',') this.eat();
        end = this.eat('Delimiter', ')')

        return {
            type: 'FunctionCall',
            function: ast_node,
            arguments: arguments,
            keywordArguments: keywordArguments,
            spreads: spreads,
            position: {
                start: ast_node.position.start,
                end: end.end
            }
        }
    }
    function pStatement(require=false) {
        this.eatLBs()
        return this.pExpression(require=require)
    }
    function pProgram() {
        this.statements = []
        while !this.isEOF() {
            if this.statements.length > 0 & this.peek(-1).type != 'LineBreak' this.eat('LineBreak')
            this.eatLBs()
            if this.isEOF() break;
            this.statements.add(this.pStatement(true))
        }
        return {
            type: "Program",
            body: this.statements,
            position: {
                start: 0 if this.statements.length == 0 else this.statements[0].position.start,
                end: 0 if this.statements.length == 0 else this.statements[-1].position.end
            }
        }
    }
    function parse() return this.pProgram()
}