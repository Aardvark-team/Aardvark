let TokenTypes = [
  'String',
  'Number',
  'Keyword',
  'Operator',
  'Identifier',
  'Delimiter',
  'Indent',
  'Comment',
  'LineBreak',
  'Boolean'
]

let Booleans = ['true', 'false']

let NotIncluded = "`'\"~!@#$%^&*()-+=[]{}\\|:;,<.>/?"

let SymbolOperators = [
  "=",   # equals
  "!",   # not,
  '~',   # about
  "<",   # less than
  ">",   # more than
  "==",  # equals
  "<=",  # less than or equal to
  ">=",  # more than or equal to
  "!=",  # not equal to
  "~=",  # about equal to
  "&",   # and
  "|",   # or
  "+",   # add
  "-",   # subtract
  "/",   # divide
  "*",   # multiplication
  "^",   # exponent 
  "%",   # mod
  "@",   # at. reference
  "?",   # x.y? will be null if x.y doesn't exist or if it is null
  "->",  # Return Type,
  "<-",
  '++',  # Increment
  '--',  # Decrement
  "$=",  # Structural Pattern Matching
  "...", # Spread
  "@=",  # Is the same reference
  "?=",  # Assign if null
  "+=",
  "-=",
  "*=",
  "/=",
  "^=",
  "%=",
  "=>",
  "=<",
  ">>=",
  ">>",
  "<<",
  "<<=",
  ">>>",
  ">>>=",
  "<<<",
  "<<<=",
]
let KeywordOperators = [
  "x|",  # xor (exclusive or)
  "not", # not
  "and", # and
  "or",  # or
  "xor", # xor
  "in",  # in
  "references",
  "is",
]
let Operators = SymbolOperators + KeywordOperators

let OrderOfOps = {
    0: ["...", "?"],
    1: ["~", "!", "@"],
    2: ["^"],
    3: ["*", "/"],
    4: ["-"],
    5: ["-", "+", "%"],
    6: ["++", "--", "=", "+=", "-=", "*=", "/=", "^=", "%=", "?="],
    7: ["~=", "<", ">", "<=", ">=", "!=", "in", "==", "$="],
    8: ["&", "|", "x|", "and", "or", "xor", "->", "<-", ">>", ">>=", "<<", "<<=", ">>>", ">>>=", "<<<", "<<<="],
}

let Whitespaces = [
    ' ',  # Space
    '\t', # Tab
    '​',   # zero width space
    ' ',  # hair space
    ' ',  # six per em space
    ' ',  # thin space
    ' ',  # punctuation space
    ' ',  # four per em space
    ' ',  # three per em space
    ' ',  # figure space
    ' ',  # en space
    ' ',  # em space
    '⠀'  # braille blank
]

let Delimiters = [
    ":",  # Colon, used for defining blocks and for types
    "(",  # left parenthesis
    ")",  # right parenthesis
    ",",  # comma
    "{",  # lbrace
    "}",  # rbrace
    "[",  # lbracket
    "]",  # rbracket
    ".",  # period
    ',',  # comma, for separating values.
    "$"   # dollar sign, used for special variables and methods
]

let Parenthesis = {
    "(": ")",
    "{": "}",
    "[": "]"
}

let Keywords = [
    'class',
    'extends', # ? use from
    'extending', # ? use let
    'function', # ? use let
    'for',
    'while',
    'match',
    'case', # ? use if?????
    'if',
    'else',
    'return',
    'static',
    'include',
    'await',
    'yield',
    'let',
    'as', # ? use =
    'from',
    'defer', # ? not essential
    "layout", # ? layout keyword not needed
    "break",
    "continue",
    "private", # ? nothing needs to be private
    "embed",
    "macro", # ? merge with embeds
    "with",
    "construct"
]
let BaseNumsOrder = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVQXYZ"
let lowercase_characters = "abcdefghijklmnopqrstuvwxyz"
let uppercase_characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let numbers = "0123456789"
let base64_characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
let base58_characters = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
let Quotes = ['"', "'", "`"]