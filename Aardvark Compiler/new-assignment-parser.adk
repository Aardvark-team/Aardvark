let parse_function_definition(ast_node) {
    let opening_parenthesis = CHECK(this.eat("Delimiter", "("))
    let parameters = []
    let any rest_parameter = null
    let any return_type = null
    let body

    loop {
        this.eat_line_breaks()
        if parameters.length > 0 or rest_parameter is not null {
            CHECK(this.eat("Delimiter", ","))
            this.eat_line_breaks()
        }
        if this.maybe_eat("Operator", "...") {
            rest_parameter = CHECK(this.parse_typed_variable())
            break
        }
        let parameter = CHECK(this.parse_typed_variable())
        let default;
        if this.maybe_eat("Operator", "=")
            default = CHECK(this.parse_expression(require=true))

        parameters.add(structure {
            ... = parameter
            default = default
        })
    }
    this.eat_line_breaks()
    if this.maybe_eat("Delimiter", ",")
        this.eat_line_breaks()
    let closing_parenthesis = this.eat("Delimiter", ")")
    if this.maybe_eat("Operator", "->") {
        return_type = CHECK(this.parse_typed_variable(require=true))
    }
    if this.compare("Operator", "=") {
        body = CHECK(this.parse_expression())
    } else {
        body = CHECK(this.parse_scope_body())
    }

    return structure {
        type = "FunctionDefinition"
        parameters = parameters
        rest_parameter = rest_parameter
        return_type = return_type
        body = body
        position = structure {
            start = opening_parenthesis.position.start
            end = body.position.end
        }
    }
}

let parse_assignment(implied="") {
    let starting_position = this.peek().position.start
    let is_mutable = false
    if this.maybe_eat("Keyword", "let") or implied is "let"
        is_mutable = this.maybe_eat("Keyword", "mutable")
    else if this.maybe_eat("Keyword", "mutable") or implied is "mutable"
        is_mutable = true
    else
        return this.Throw("SyntaxError", "Invalid syntax.", position=this.peek().position, here_message= "Expected 'mutable' or 'let'.")

    let assignments = []
    let exclude = ["Reassignment"]
    loop {
        let assignment_start = this.peek().position.start
        if assignments.length > 0
            CHECK(this.eat("Delimiter", ","))
        let variables = []
        let value
        # For chaining: `let x = y = z`
        loop {
            let first_pos = this.pos
            let to_exclude = exclude.slice()
            if variables.length is 0
                to_exclude.add("FunctionCall")
            let first = CHECK(this.parse_expression(require=true, exclude=exclude, is_deconstruction=true))
            let second = CHECK(this.parse_expression(require=false, exclude=exclude, is_deconstruction=true))
            if not this.compare("Operator", "=") and variables.length > 0 {
                if second
                    return this.Throw("SyntaxError", "Invalid syntax.", structure {
                        markers = structure {
                            line = first.position.start.line - 1
                            column = first.position.start.column - 1
                            length = second.position.end.column - first.position.start.column + 1
                            message = $"You can't assign {'this' if variables.length is 1 else 'these'} variables to two things squished together."
                        }
                        location = first.position
                    })
                
                value = first
                break
            }
            if this.compare("Delimiter", "(") and not second and this.is_valid_variable_definition(first) and variables.length is 0 {
                value = CHECK(this.parse_function_definition())
                break
            }
            let variable = CHECK(this.parse_typed_variable(first=first, second=second))
            variables.add(variable)
        }
        # The value is optional.
        if variables.length is 0 
            return this.Throw("SyntaxError", "Invalid syntax.", position=this.peek().position, here_message= "Expected an assignment.")
        
        assignments.add(structure {
            type = "Assignment"
            variables = variables
            value = value?
            position = structure {
                start = assignment_start
                end = this.peek(-1).position.end
            }
        })
    }
}